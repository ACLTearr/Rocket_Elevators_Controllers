SET initialfloor TO x

SET moveToFloor TO y

SET direction TO z (up or down)

SEQUENCE SCENARIO USING initialFloor and direction AND moveToFloor

    CALL ElevatorController WITH initialFloor AND direction AND moveToFloor

ENDSEQUENCE

DEFINE ElevatorController USING initialFloor AND direction AND moveToFloor
   
    CALL requestElevator WITH initialFloor AND direction AND moveToFloor
   
    CALL moveElevator WITH direction AND moveToFloor AND columnFloorsServed

    CALL Column:Elevator:elevatorDoors:Doors:closeDoor WITH Column:Elevator:elevatorDoors:Doors

ENDDEFINE

SET numberOfBatteries TO 1

DEFINE Battery USING initialFloor AND moveToFloor AND direction

    SET numberOfColumns TO 4

    SET elevatorsPerColumn TO 5
    
    SET floorsServed TO (numberOfFloors DIVIDED BY (numberOfColumns MINUS 1 "for basement column") WITH remainder split between (numberOfColumns MINUS 1) columns)

    SET numberOfBasements TO 6

    SET numberOfFloors TO 60

    SET columnCounter TO 1

    SET floorsServedCounter TO 1

    SET columnList

    FOR numberOfColumns

        SET column CONCAT columnCounter TO NEW INSTANCE OF Column WITH elevatorsPerColumn AND numberOfFloors AND numberOfBasements AND floor AND direction AND floorsServed

        LET every Column IN columnList serve floorsServed 

        ADD TO columnList

        INCREMENT columnCounter BY 1

    ENDFOR

=====Sets which floors every column serves=====
    FOR Column IN columnList EXCEPT FIRST ITEM IN LIST

        IF columnCounter EQUALS 1 THEN

            SET columnFloorsServed TO (floorsServedCounter TO floorsServed)

            INCREMENT floorsServedCounter BY floorsServed MINUS 1

        ELSE

            SET columnFloorsServed TO (floorsServedCounter TO (floorsServedCounter PLUS floorsServed PLUS 1)

            INCREMENT floorsServedCounter BY floorsServed

        ENDIF
    
    ENDFOR

ENDDEFINE

=====Defines a column=====
DEFINE Column USING elevatorsPerColumn AND numberOfFloors AND numberOfBasements AND floor AND direction AND floorsServed

    SET elevatorCounter TO 1

    SET callButtonCounter TO 1

    SET callButtonCounterBasement TO 1

    SET columnFloorsServed TO numberOfBasements

    SET elevatorList

    SET callButtonList

=====Set Elevators in every column=====
    FOR elevatorsPerColumn

        SET elevator CONCAT elevatorCounter TO NEW INSTANCE of Elevator WITH elevatorCounter AND elevatorsPerColumn AND numberOfFloors AND numberOfBasements AND columnFloorsServed

        ADD TO elevatorList

        INCREMENT elevatorCounter BY 1

    ENDFOR

=====Set call buttons on every floor=====
    FOR numberOfFloors

        SET callButton CONCAT callButtonCounter CONCAT down TO NEW INSTANCE OF CallButton WITH callButtonCounter AND down

        ADD TO callButtonList

        IF callButtonCounter DOES NOT EQUAL numberOfFloors THEN

            SET callButton CONCAT callButtonCounter CONCAT up TO NEW INSTANCE OF CallButton WITH callButtonCounter AND up

            ADD TO callButtonList

        ENDIF

        INCREMENT callButtonCounter

    ENDFOR

    FOR numberOfBasements

        SET callButton CONCAT Basement CONCAT callButtonCounterBasement CONCAT up TO NEW INSTANCE OF CallButton WITH callButtonCounterBasement AND up

        ADD TO callButtonList

        IF callButtonCounterBasement DOES NOT EQUAL numberOfBasements THEN

            SET callButton CONCAT Basement CONCAT callButtonCounterBasement CONCAT down TO NEW INSTANCE OF CallButton WITH callButtonCounterBasement AND down

            ADD TO callButtonList

        ENDIF

        INCREMENT callButtonCounterBasement

    ENDFOR

=====Sends elevator to floor for pickup=====
    SEQUENCE requestElevator USING initialFloor AND direction AND this:elevatorList AND moveToFloor

        CALL findBestElevator WITH initialFloor AND direction AND this:elevatorList AND moveToFloor

        CALL this:Elevator:moveElevator WITH initialFloor AND direction AND columnFloorsServed AND RETURNED Elevator

        //Open Doors called in move elevator function//

        Allow people to enter

        INCREMENT currentOccupancy by number of people to enter elevator

        IF currentOccupancy is greater than maxOccupancy THEN

            SET this:Elevator:elevatorDisplay:ElevatorDisplayPanel:elevatorScreen TO "MAX OCCUPANCY EXCEEDED - PLEASE LEAVE ELEVATOR" AND wait until currentOccupancyis less than maxOccupancy

            ONCE currentOccupancy IS LESS THAN OR EQUAL TO maxOccupancy CALL changeDisplay WITH this:Elevator:currentFloor

        ELSE

            CALL this:Elevator:elevatorDoors:Doors:closeDoor WITH this:Elevator:elevatorDoors:Doors AND this:Elevator:elevatorButtonsList

        ENDIF

=====Finding best elevator=====
        SEQUENCE findBestElevator USING initialFloor AND direction AND this:elevatorList AND moveToFloor

            FOR Elevator IN elevatorList

                CALCULATE ABSOLUTE VALUE OF (Elevator:currentFloor MINUS initialFloor) AND RETURN AS Elevator:distance

                IF Elevator:distance EQUALS 0 AND Elevator:status IS idle THEN

                    RETURN Elevator

                ELSE IF Elevator:distance EQUALS 0 THEN

                    RETURN Elevator

                ELSE IF Elevator:distance IS LESS THAN all other Elevator:distance AND Elevator:currentDirection IS TOWARDS initialFloor

                    RETURN Elevator

                ELSE IF Elevator:distance IS LESS THAN all other Elevator:distance AND Elevator:status IS idle

                    RETURN Elevator

                ELSE IF Elevator:distance IS LESS THAN all other Elevator:distance AND Elevator IS MOVING TO moveToFloor

                    RETURN Elevator

                ELSE IF Elevator:currentDirection IS TOWARDS moveToFloor

                    RETURN Elevator

                ELSE IF Elevator:currentOccupancy IS EQUAL TO 0 OR Elevator:elevatorStatus IS idle THEN

                    RETURN Elevator

                ENDIF

            ENDFOR

        ENDSEQUENCE

    ENDSEQUENCE

ENDDEFINE

=====Defines call button elements=====
DEFINE CallButton USING callButtonCounter AND callButtonCounterBasement AND direction

    IF SENT WITH callButtonCounterBasement THEN

        SET id TO callButtoin CONCAT callButtonCounterBasement CONCAT direction

        SET callButtonFloor TO callButtonCounterBasement

    ELSE

        SET id TO callButton CONCAT callButtonCounter CONCAT direction

        SET callButtonFloor TO callButtonCounter

    ENDIF

    SET callButtonDirection TO direction

ENDDEFINE

=====Defones elevator elements=====
DEFINE Elevator USING elevatorCounter AND elevatorsPerColumn AND numberOfFloors AND numberOfBasements AND columnFloorsServed

    SET floorCounter TO 1

    SET basementCounter TO 1

    SET currentFloor TO 1

    SET id TO elevator CONCAT elevatorCounter

    SET elevatorButtonsList

=====Sets elevator buttons panel=====
    IF columnFloorsServed DOES NOT EQUAL numberOfBasements THEN

        FOR columnFloorsServed

            SET requestFloor CONCAT floorCounter TO NEW INSTANCE OF ElevatorPanelButton WITH floorCounter

            ADD TO elevatorButtonsList

            INCREMENT floorCounter

        ENDFOR

    ELSE

        FOR numberOfBasements

            SET requestBasement CONCAT basementCounter TO NEW INSTANCE OF ElevatorPanelButton WITH basementCounter

            ADD TO elevatorButtonsList

            INCREMENT basementCounter

        ENDFOR

    ENDIF

=====Sets close door button=====
    FOR elevatorsPerColumn

        SET closeDoors CONCAT elevatorCounter TO NEW INSTANCE OF ElevatorPanelButton WITH close AND elevatorCounter

        ADD TO elevatorButtonsList

    ENDFOR

=====Sets open door button=====
    FOR elevatorsPerCOlumn

        SET openDoors CONCAT elevatorCounter TO NEW INSTANCE OF ElevatorPanelButton WITH open AND elevatorCounter

        ADD TO elevatorButtonsList

    ENDFOR

    SET elevatorStatus TO idle
    
    SET elevatorDirection TO notMoving

    SET currentOccupancy TO 0

    SET maxOccupancy TO 10 'real number specified by specific elevator installed adn codes pertaining to that'

    SET elevatorDisplay TO ElevatorDisplayPanel:elevatorScreen

    SET distance TO null

    SET elevatorDoors TO Doors:status

    SET displayCounter

=====Setting display panel in all elevators=====
    FOR elevatorsPerCOlumn

        SET elevatorScreen CONCAT displayCounter TO NEW INSTANCE OF ElevatorDisplayPanel WITH Elevator:currentFloor

        INCREMENT displayCounter BY 1

    ENDFOR

=====Sends elevator to floor====
    SEQUENCE moveElevator USING initialFloor AND direction AND moveToFloor AND columnFloorsServed AND RETURNED Elevator

        IF moveToFloor IS GREATER THAN columnFloorsServed highest floor THEN

            INCREMENT Elevator:currentFloor BY 1 UNTIL Elevator:currentFloor IS EQUAL TO columnFloorsServed highest floor

            SET this:Elevator:currentFloor TO columnFloorsServed highest floor

        ELSE IF moveToFloor IS LESS THAN columnFloorsServed lowest floor THEN

            INCREMENT Elevator:currentFloor BY -1 UNTIL Elevator:currentFloor IS EQUAL TO columnFloorsServed lowest floor

            SET this:Elevator:currentFloor TO columnFloorsServed lowest floor

        ELSE IF Elevator:currentFloor IS LESS THAN initialFloor OR moveToFloor THEN

            INCREMENT Elevator:currentFloor BY 1 UNTIL Elevator:currentFloor IS EQUAL TO initialFloor OR moveToFloor

            SET this:Elevator:currentFloor TO initialFloor OR moveToFloor

        ELSE IF Elevator:currentFloor IS GREATER THAN InitialFloor OR moveToFloor THEN

            INCREMENT Elevator:currentFloor BY -1 UNTIL Elevator:currentFloor IS EQUAL TO initialFloor OR moveToFloor

            SET this:Elevator:currentFloor TO initialFloor OR moveToFloor

        ENDIF

        CALL changeDisplay WITH this:Elevator:currentFloor

        CALL Elevator:elevatorDoors:Doors:openDoor WITH Elevator:elevatorDoors

        SET Elevator:elevatorDirection TO up

        SET Elevator:elevatorStatus TO moving

    ENDSEQUENCE

ENDDEFINE

=====Defines buttons contained in elevator Panel===
DEFINE ElevatorPanelButton USING floorCounter AND buttonDoorStatus AND elevatorCounter AND basementCounter

    IF requestBasement THEN

        SET id TO requestBasement CONCAT basementCounter

        SET basementRequested TO basementCounter
    
    ELSE IF requestFloor THEN

        SET id TO requestFloor CONCAT floorCounter

        SET floorRequested TO floorCounter

    ELSE IF closeDoor THEN

        SET id TO closeDoor CONCAT elevatorCounter

        SET buttonDoorStatus TO close

    ELSE IF openDoor THEN

        SET id TO openDoor CONCAT elevatorCounter

        SET buttonDoorStatus TO open

    ENDIF

=====Defines Door Elements=====
DEFINE Doors

    SET state TO closed

    =====Close door=====
    SEQUENCE closeDoor USING Elevator:elevatorButtonsList AND Elevator:elevatorDoors
 
        IF Elevator:elevatorButtonsList:closeDoors is pressed AND Elevator:elevatorDoors:Doors:state are clear of any obstructions THEN
 
            SET state TO closed
 
        ELSE
 
            After 3 seconds AND Elevator:elevatorDoors:Doors:state are clear of any obstructions, SET Elevator:elevatorDoors:Doors:state TO closed
 
        ENDIF
 
    ENDSEQUENCE

=====Open door=====
    SEQUENCE openDoor USING Elevator:elevatorDoors
 
        SET Elevator:elevatorDoors:Doors:state TO open
 
    ENDSEQUENCE

ENDDEFINE 

=====Defines elevator display=====
DEFINE ElevatorDisplayPanel USING Elevator:currentFloor

    SET elevatorScreen TO Elevator:currentFloor

    SEQUENCE changeDisplay USING Elevator:currentFloor

        SET elevatorScreen TO Elevator:currentFloor

    ENDSEQUENCE 

ENDDEFINE  