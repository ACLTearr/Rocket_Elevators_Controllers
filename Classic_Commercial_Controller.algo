SET initialfloor TO x

SET moveToFloor TO y

SET direction TO z (up or down)

SEQUENCE SCENARIO USING initialFloor and direction AND moveToFloor

    CALL ElevatorController WITH initialFloor AND direction AND moveToFloor

ENDSEQUENCE

DEFINE ElevatorController USING initialFloor AND direction AND moveToFloor
   
    CALL Battery:Column:requestElevator WITH initialFloor AND direction AND moveToFloor
   
    CALL Battery:Column:requiredElevator:moveElevator WITH direction AND moveToFloor AND columnFloorsServed AND requiredElevator

    CALL Column:requiredElevator:elevatorDoors:Doors:closeDoor WITH Column:requiredElevator:elevatorDoors:Doors

    CALL defaultElevatorPositon WITH Battery:columnRequired:requiredElevator:currentFloor

ENDDEFINE

SET numberOfBatteries TO 1

DEFINE Battery USING initialFloor AND moveToFloor AND direction

    SET numberOfColumns TO 4

    SET elevatorsPerColumn TO 5
    
    SET floorsServed TO (numberOfFloors DIVIDED BY (numberOfColumns MINUS 1 "for basement column") WITH remainder split between (numberOfColumns MINUS 1) columns)

    SET numberOfBasements TO 6

    SET numberOfFloors TO 60

    SET columnCounter TO 1

    SET floorsServedCounter TO 1

    SET columnList

=====Creating columns=====
    FOR numberOfColumns

        SET column CONCAT columnCounter TO NEW INSTANCE OF Column WITH elevatorsPerColumn AND numberOfFloors AND numberOfBasements AND floor AND direction AND floorsServed

        LET every Column IN columnList serve floorsServed 

        ADD TO columnList

        INCREMENT columnCounter BY 1

    ENDFOR

=====Sets which floors every column serves=====
    FOR Column IN columnList EXCEPT FIRST ITEM IN LIST

        IF columnCounter EQUALS 1 THEN

            SET columnFloorsServed TO (floorsServedCounter TO floorsServed)

            INCREMENT floorsServedCounter BY (floorsServed MINUS 1)

        ELSE

            SET columnFloorsServed TO (floorsServedCounter TO (floorsServedCounter PLUS floorsServed)

            INCREMENT floorsServedCounter BY floorsServed

        ENDIF
    
    ENDFOR

ENDDEFINE

=====Defines a column=====
DEFINE Column USING elevatorsPerColumn AND numberOfFloors AND numberOfBasements AND floor AND direction AND floorsServed

    SET elevatorCounter TO 1

    SET callButtonCounter TO 1

    SET callButtonCounterBasement TO 1

    SET columnFloorsServed TO numberOfBasements

    SET elevatorList

    SET callButtonList

=====Set Elevators in every column=====
    FOR elevatorsPerColumn

        SET elevator CONCAT elevatorCounter TO NEW INSTANCE of Elevator WITH elevatorCounter AND elevatorsPerColumn AND numberOfFloors AND numberOfBasements AND columnFloorsServed

        ADD TO elevatorList

        INCREMENT elevatorCounter BY 1

    ENDFOR

=====Set call buttons on every floor=====
    FOR numberOfFloors

        SET callButton CONCAT callButtonCounter CONCAT down TO NEW INSTANCE OF CallButton WITH callButtonCounter AND down

        ADD TO callButtonList

        IF callButtonCounter DOES NOT EQUAL numberOfFloors THEN

            SET callButton CONCAT callButtonCounter CONCAT up TO NEW INSTANCE OF CallButton WITH callButtonCounter AND up

            ADD TO callButtonList

        ENDIF

        INCREMENT callButtonCounter

    ENDFOR

    FOR numberOfBasements

        SET callButton CONCAT Basement CONCAT callButtonCounterBasement CONCAT up TO NEW INSTANCE OF CallButton WITH callButtonCounterBasement AND up

        ADD TO callButtonList

        IF callButtonCounterBasement DOES NOT EQUAL numberOfBasements THEN

            SET callButton CONCAT Basement CONCAT callButtonCounterBasement CONCAT down TO NEW INSTANCE OF CallButton WITH callButtonCounterBasement AND down

            ADD TO callButtonList

        ENDIF

        INCREMENT callButtonCounterBasement

    ENDFOR

=====Sends elevator to floor for pickup=====
    SEQUENCE requestElevator USING initialFloor AND direction AND this:elevatorList AND moveToFloor AND columnFloorsServed AND requiredElevator

        CALL this:findBestElevator WITH initialFloor AND direction AND this:elevatorList AND moveToFloor AND columnFloorsServed

        CALL this:requiredElevator:moveElevator WITH initialFloor AND direction AND columnFloorsServed AND requiredElevator

        //Open Doors called in move elevator function//

        Allow people to enter

        INCREMENT currentOccupancy by number of people to enter elevator

        REPEAT

            IF currentOccupancy is greater than maxOccupancy THEN

                SET this:requiredElevator:elevatorDisplay:ElevatorDisplayPanel:elevatorScreen TO "MAX OCCUPANCY EXCEEDED - PLEASE LEAVE ELEVATOR"

            ELSE

                CALL this:requiredElevator:elevatorDoors:Doors:closeDoor WITH this:requiredElevator:elevatorDoors:Doors AND this:requiredElevator:elevatorButtonsList

                CALL this:requiredElevator:elevatorDisplay:ElevatorDisplayPanel:changeDisplay WITH this:requiredElevator:currentFloor

            ENDIF

        UNTIL currentOccupancy IS LESS THAN OR EQUAL TO maxOccupancy

    ENDSEQUENCE

=====Finding best elevator=====
    SEQUENCE findBestElevator USING initialFloor AND direction AND this:elevatorList AND moveToFloor AND columnFloorsServed

        FOR Elevator IN elevatorList

            CALCULATE ABSOLUTE VALUE OF (Elevator:currentFloor MINUS initialFloor) AND SET TO Elevator:distance

            IF Elevator:distance EQUALS 0 AND Elevator:status IS idle THEN

                RETURN Elevator AS requiredElevator

            ELSE IF Elevator:distance EQUALS 0 THEN

                RETURN Elevator AS requiredElevator

            ELSE IF Elevator:distance IS LESS THAN all other Elevator:distance AND Elevator:currentDirection IS TOWARDS initialFloor

                RETURN Elevator AS requiredElevator

            ELSE IF Elevator:distance IS LESS THAN all other Elevator:distance AND Elevator:status IS idle

                RETURN Elevator AS requiredElevator

            ELSE IF Elevator:distance IS LESS THAN all other Elevator:distance AND Elevator IS MOVING TO moveToFloor

                RETURN Elevator AS requiredElevator

            ELSE IF Elevator:currentDirection IS TOWARDS moveToFloor

                RETURN Elevator AS requiredElevator

            ELSE IF Elevator:currentOccupancy IS EQUAL TO 0 OR Elevator:elevatorStatus IS idle THEN

                RETURN Elevator AS requiredElevator

            ENDIF

        ENDFOR

    ENDSEQUENCE

ENDDEFINE

=====Defines call button elements=====
DEFINE CallButton USING callButtonCounter AND callButtonCounterBasement AND direction

    IF SENT WITH callButtonCounterBasement THEN

        SET id TO callButton CONCAT callButtonCounterBasement CONCAT direction

        SET callButtonFloor TO callButtonCounterBasement

    ELSE

        SET id TO callButton CONCAT callButtonCounter CONCAT direction

        SET callButtonFloor TO callButtonCounter

    ENDIF

    SET callButtonDirection TO direction

ENDDEFINE

=====Defones elevator elements=====
DEFINE Elevator USING elevatorCounter AND elevatorsPerColumn AND numberOfFloors AND numberOfBasements AND columnFloorsServed AND requiredElevator

    SET floorCounter TO 1

    SET basementCounter TO 1

    SET currentFloor TO 1

    SET id TO elevator CONCAT elevatorCounter

    SET elevatorButtonsList

=====Sets elevator buttons panel=====
    IF columnFloorsServed DOES NOT EQUAL numberOfBasements THEN

        FOR columnFloorsServed

            SET requestFloor CONCAT floorCounter TO NEW INSTANCE OF ElevatorPanelButton WITH floorCounter

            ADD TO elevatorButtonsList

            INCREMENT floorCounter

        ENDFOR

    ELSE

        FOR numberOfBasements

            SET requestBasement CONCAT basementCounter TO NEW INSTANCE OF ElevatorPanelButton WITH basementCounter

            ADD TO elevatorButtonsList

            INCREMENT basementCounter

        ENDFOR

    ENDIF

=====Sets close door button=====
    FOR elevatorsPerColumn

        SET closeDoors CONCAT elevatorCounter TO NEW INSTANCE OF ElevatorPanelButton WITH close AND elevatorCounter

        ADD TO elevatorButtonsList

    ENDFOR

=====Sets open door button=====
    FOR elevatorsPerCOlumn

        SET openDoors CONCAT elevatorCounter TO NEW INSTANCE OF ElevatorPanelButton WITH open AND elevatorCounter

        ADD TO elevatorButtonsList

    ENDFOR

    SET elevatorStatus TO idle
    
    SET elevatorDirection TO notMoving

    SET currentOccupancy TO 0

    SET maxOccupancy TO 10 'real number specified by specific elevator installed adn codes pertaining to that'

    SET elevatorDisplay TO ElevatorDisplayPanel:elevatorScreen

    SET distance TO null

    SET elevatorDoors TO Doors:status

    SET displayCounter

=====Setting display panel in all elevators=====
    FOR elevatorsPerCOlumn

        SET elevatorScreen CONCAT displayCounter TO NEW INSTANCE OF ElevatorDisplayPanel WITH Elevator:currentFloor

        INCREMENT displayCounter BY 1

    ENDFOR

=====Sends elevator to floor====
    SEQUENCE moveElevator USING initialFloor AND direction AND moveToFloor AND columnFloorsServed AND requiredElevator

        SET requiredElevator:elevatorStatus TO moving

        SET requiredElevator:elevatorDirection TO direction
        
        IF moveToFloor IS GREATER THAN columnFloorsServed highest floor THEN

            REPEAT

                INCREMENT requiredElevator:currentFloor BY 1
            
            UNTIL requiredElevator:currentFloor IS EQUAL TO columnFloorsServed highest floor

        ELSE IF moveToFloor IS LESS THAN columnFloorsServed lowest floor THEN

            REPEAT

                INCREMENT requiredElevator:currentFloor BY -1 
            
            UNTIL requiredElevator:currentFloor IS EQUAL TO columnFloorsServed lowest floor

        ELSE IF requiredElevator:currentFloor IS LESS THAN initialFloor OR moveToFloor THEN

            REPEAT

                INCREMENT requiredElevator:currentFloor BY 1
            
            UNTIL requiredElevator:currentFloor IS EQUAL TO initialFloor OR moveToFloor

        ELSE IF requiredElevator:currentFloor IS GREATER THAN initialFloor OR moveToFloor THEN

            REPEAT

                INCREMENT requiredElevator:currentFloor BY -1
                
            UNTIL requiredElevator:currentFloor IS EQUAL TO initialFloor OR moveToFloor

        ENDIF

        SET this:requiredElevator:currentFloor TO initialFloor OR moveToFloor

        CALL this:requiredElevator:elevatorDesplay:ElevatorDisplayPanel:changeDisplay WITH this:requiredElevator:currentFloor

        CALL requiredElevator:elevatorDoors:Doors:openDoor WITH requiredElevator:elevatorDoors

        SET requiredElevator:elevatorDirection TO notMoving

        SET requiredElevator:elevatorStatus TO idle

    ENDSEQUENCE

ENDDEFINE

=====Defines buttons contained in elevator Panel===
DEFINE ElevatorPanelButton USING floorCounter AND buttonDoorStatus AND elevatorCounter AND basementCounter

    IF requestBasement THEN

        SET id TO requestBasement CONCAT basementCounter

        SET basementRequested TO basementCounter
    
    ELSE IF requestFloor THEN

        SET id TO requestFloor CONCAT floorCounter

        SET floorRequested TO floorCounter

    ELSE IF closeDoor THEN

        SET id TO closeDoor CONCAT elevatorCounter

        SET buttonDoorStatus TO close

    ELSE IF openDoor THEN

        SET id TO openDoor CONCAT elevatorCounter

        SET buttonDoorStatus TO open

    ENDIF

=====Defines Door Elements=====
DEFINE Doors

    SET state TO closed

    =====Close door=====
    SEQUENCE closeDoor USING requiredElevator:elevatorButtonsList AND requiredElevator:elevatorDoors
 
        IF requiredElevator:elevatorButtonsList:closeDoors is pressed AND requiredElevator:elevatorDoors:Doors:state are clear of any obstructions THEN
 
            SET state TO closed
 
        ELSE
 
            After 3 seconds AND requiredElevator:elevatorDoors:Doors:state are clear of any obstructions, SET requiredElevator:elevatorDoors:Doors:state TO closed
 
        ENDIF
 
    ENDSEQUENCE

=====Open door=====
    SEQUENCE openDoor USING requiredElevator:elevatorDoors
 
        SET requiredElevator:elevatorDoors:Doors:state TO open
 
    ENDSEQUENCE

ENDDEFINE 

=====Defines elevator display=====
DEFINE ElevatorDisplayPanel USING requiredElevator:currentFloor

    SET elevatorScreen TO requiredElevator:currentFloor

    SEQUENCE changeDisplay USING requiredElevator:currentFloor

        SET elevatorScreen TO requiredElevator:currentFloor

    ENDSEQUENCE 

ENDDEFINE 

=====Default elevator position=====
SEQUENCE defaultElevatorPositon USING Battery:columnRequired:requiredElevator:currentFloor

    SET requiredElevator:elevatorStatus TO moving
    
    IF Battery:columnRequired:requiredElevator:currentFloor IS GREATER THAN 1

        REPEAT
    
            INCREMENT Battery:columnRequired:requiredElevator:currentFloor BY -1

        UNTIL Battery:columnRequired:requiredElevator:currentFloor EQUALS 1

        SET requiredElevator:elevatorDirection TO down

    ELSE IF Battery:columnRequired:requiredElevator:currentFloor IS LESS THAN 1

        REPEAT

            INCREMENT Battery:columnRequired:requiredElevator:currentFloor BY 1

        UNTIL Battery:columnRequired:requiredElevator:currentFloor EQUALS 1

        SET requiredElevator:elevatorDirection TO up

    ENDIF
    
    SET this:requiredElevator:currentFloor TO 1

    CALL this:requiredElevator:elevatorDesplay:ElevatorDisplayPanel:changeDisplay WITH this:requiredElevator:currentFloor

    SET requiredElevator:elevatorDirection TO notMoving

    SET requiredElevator:elevatorStatus TO idle

ENDSEQUENCE 