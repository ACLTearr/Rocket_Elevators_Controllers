SET numberOfColumns TO 1

SET elevatorsPerColumn TO 2

SET numberOfBasements TO 0

SET numberOfFloors TO 10

SET totalFloors TO (numberOfFloors PLUS numberOfBasements)

SET columnA TO NEW INSTANCE OF Column

DEFINE ElevatorController USING floor AND direction
    CALL requestElevator WITH floor AND direction
    CALL moveOccupant WITH floor AND direction
ENDDEFINE

DEFINE Column USING elevatorsPerColumn AND totalFloors AND numberOfFloors AND numberOfBasements AND floor AND direction

    SET elevatorCounter TO 1

    SET callButtonCounter TO 1

    SET elevatorList

    SET callButtonList

=====Set elevators in every column=====
    FOR elevatorsPerColumn

        SET elevator CONCAT elevatorCounter TO NEW INSTANCE OF Elevator WITH elevatorCounter AND elevatorsPerColumn AND numberOfFloors AND numberOfBasements AND elevatorCounter

        INCREMENT elevatorCounter

        ADD TO elevatorList

    ENDFOR

=====Set call buttons on every floor===== "Configure for basements"
    FOR totalFloors

        IF callButtonCounter NOT EQUAL 1 THEN

            SET callButton CONCAT callButtonCounter CONCAT down TO NEW INSTANCE OF CallButton WITH callButtonCounter AND down

            ADD TO callButtonList

        ENDIF

        IF callButtonCounter NOT EQUAL numberOfFloors THEN

            SET callButton CONCAT callButtonCounter CONCAT up TO NEW INSTANCE OF CallButton WITH callButtonCounter AND up

            ADD TO callButtonList

        ENDIF

        INCREMENT callButtonCounter                                    

    ENDFOR

=====Sends Elevator to Floor For Pickup=====
    SEQUENCE requestElevator USING floor AND direction AND elevatorList

        CALL findBestElevator WITH floor AND direction AND elevatorList

        CALL this:Elevator:moveElevator WITH floor AND direction AND bestElevator

        SET this:Elevator:elevatorFloor TO floor

        CALL this:Elevator:openDoor WITH this:Elevator:elevatorDoors

        Allow people to enter

        INCREMENT currentOccupancy by number of people to enter elevator

        IF currentOccupancy is greater than maxOccupancy THEN

            SET Elevator:elevatorDisplay TO "MAX OCCUPANCY EXCEEDED - PLEASE LEAVE ELEVATOR" AND wait until currentOccupancy is less than maxOccupancy

        ELSE 

            CALL Elevator:closeDoor WITH Elevator:elevatorDoors
        
        ENDIF

        =====Finding Best Elevator To Send=====
        SEQUENCE findBestElevator USING floor AND direction AND elevatorList

            FOR Elevator IN this:elevatorList

                CALCULATE ABSOLUTE VALUE OF (Elevator:currentFloor MINUS floor) AND RETURN AS Elevator:distance

                IF Elevator:distance EQUALS 0 THEN

                    RETURN Elevator AS bestElevator

                ELSE IF Elevator:distance IS less than all other Elevator:distance AND Elevator:direction EQUALS direction THEN

                    RETURN Elevator AS bestElevator

                ELSE IF Elevator:currentOccupancy IS EQUAL TO 0 THEN

                    RETURN Elevator AS bestElevator

                ENDIF

            ENDFOR
 
        ENDSEQUENCE
 
    ENDSEQUENCE

ENDDEFINE

=====Defines Call Button Elements=====
DEFINE CallButton USING callButtonCounter AND direction

    SET id TO callButton CONCAT callButtonCounter CONCAT direction

    SET floorNumber TO callButtonCounter

    SET direction TO direction

ENDDEFINE

=====Defines Elevator Elements=====
DEFINE Elevator USING elevatorCounter AND elevatorsPerColumn AND numberOfFloors AND numberOfBasements AND elevatorCounter

    SET floorCounter TO 1

    SET basementCounter TO 1

    SET currentFloor TO 1

    SET id TO elevator CONCAT elevatorCounter

    SET elevatorButtonsList

=====Sets floor selection buttons within elevator=====
    FOR numberOfFloors

        SET requestFloor CONCAT floorCounter TO NEW INSTANCE OF ElevataorPanelButton WITH floorCounter

        INCREMENT floorCounter

        ADD TO elevatorButtonsList

    ENDFOR

    FOR numberOfBasements

        SET requestBasement CONCAT floorCounter TO NEW INSTANCE OF ElevataorPanelButton WITH basementCounter

        INCREMENT basementCounter

    ENDFOR

=====Sets close door button within elevator=====
    FOR elevatorsPerColumn

        SET closeDoors CONCAT elevatorCounter TO NEW INSTANCE OF ElevataorPanelButton WITH closed AND elevatorCounter

        ADD TO elevatorButtonsList

    ENDFOR

=====Sets open door button within elevator=====
    FOR elevatorsPerColumn

        SET openDoors CONCAT elevatorCounter TO NEW INSTANCE OF ElevataorPanelButton WITH open AND elevatorCounter

        ADD TO elevatorButtonsList

    ENDFOR

    SET elevatorStatus TO idle

    SET elevatorDirection TO notMoving

    SET currentOccupancy TO 0

    SET maxOccupancy TO 10 'number specified by elevator installed and specific codes'

    SET elevatorDisplay TO elevatorFloor

    SET distance TO null

    SET elevatorDoors TO Doors

=====Close door=====
    SEQUENCE closeDoor USING elevatorDoors
 
        IF ElevataorPanelButton:closeDoors is pressed AND elevatorDoors:Doors:state are clear of any obstructions THEN
 
            SET elevatorDoors:Doors:state TO closed
 
        ELSE
 
            After 3 seconds AND elevatorDoors:Doors:state are clear of any obstructions, SET elevatorDoors:Doors:state TO closed
 
        ENDIF
 
    ENDSEQUENCE

=====Open door=====
    SEQUENCE openDoor USING elevatorDoors
 
        SET elevatorDoors:Doors:state TO open
 
    ENDSEQUENCE

    =====Sends Elevator To floor For Dropoff=====
    SEQUENCE moveElevator USING floor AND direction AND bestElevator

        IF bestElevator:currentFloor IS less than floor THEN

            INCREMENT bestElevator:currentFloor BY 1 UNTIL bestElevator:currentFloor IS EQUAL TO floor

        ELSE IF bestElevator:currentFloor IS greater than floor THEN

            INCREMENT bestElevator:currentFloor BY -1 UNTIL bestElevator:currentFloor IS EQUAL TO floor

    ENDSEQUENCE

ENDDEFINE

=====Defines Buttons Contained In Elevator Panel=====
DEFINE ElevataorPanelButton USING floorCounter AND buttonDoorStatus AND elevatorCounter AND basementCounter

    IF requestBasement THEN

        SET id TO requestBasement CONCAT basementCounter
    
    ELSE IF requestFloor THEN

        SET id TO requestFloor CONCAT floorCounter

    ELSE IF closeDoor THEN

        SET id TO closeDoor CONCAT elevatorCounter

    ELSE IF openDoor THEN

        SET id TO openDoor CONCAT elevatorCounter

    ENDIF

    IF requestFloor THEN
    
        SET floorRequested TO floorCounter

    ELSE IF requestBasement THEN

        SET basementRequested TO basementCounter

    ENDIF

    SET closeDoor TO closed

    SET openDoor TO open

ENDDEFINE

=====Defines Door Elements=====
DEFINE Doors

    SET state TO closed

ENDDEFINE